[probe_eddy_current fly_eddy_probe]
sensor_type: ldc1612
i2c_address: 43
i2c_mcu: toolhead
i2c_bus: i2c1b
x_offset: 0     #记得设置x偏移
y_offset: 21.42 #记得设置y偏移 
z_offset: 2     #记得设置z偏移
i2c_speed: 4000000

[temperature_probe fly_eddy_probe]
sensor_type: Generic 3950
sensor_pin:toolhead:gpio28
horizontal_move_z: 4

[gcode_macro _LDC_CALIBRATE_DRIVE_CURRENT]
gcode:
    BED_MESH_CLEAR
    SET_KINEMATIC_POSITION x=100 y=100 z=10
    G28 X Y
    M104 S0
    M140 S0
    M106 S0
    G0 X{printer.toolhead.axis_maximum.x / 2} Y{printer.toolhead.axis_maximum.y / 2} F6000
    G0 Z30 F600
    G4 P1000
    LDC_CALIBRATE_DRIVE_CURRENT CHIP=fly_eddy_probe 
    G4 P1000
    SAVE_CONFIG

[gcode_macro PROBE_EDDY_CURRENT_CALIBRATE_AUTO]
gcode:
    BED_MESH_CLEAR
    G28 X Y
    M104 S0
    M140 S0
    M106 S0
    G90 # Abs positioning
    G1 X{ printer.toolhead.axis_maximum.x/2 } Y{ printer.toolhead.axis_maximum.y/2 } F6000
    {% if 'z' not in printer.toolhead.homed_axes %}
        SET_KINEMATIC_POSITION Z={ printer.toolhead.axis_maximum.z-1 } # Allows the user to work it down until it touches.
    {% endif %}
    PROBE_EDDY_CURRENT_CALIBRATE {rawparams}

[gcode_macro TEMP_COMPENSATION]
description: 温度补偿校准流程
gcode:
    {% set bed_temp = params.BED_TEMP|default(90)|int %}
    {% set nozzle_temp = params.NOZZLE_TEMP|default(250)|int %}
    {% set temperature_range_value = params.TEMPERATURE_RANGE_VALUE|default(3)|int %}
    {% set desired_temperature = params.DESIRED_TEMPERATURE|default(80)|int %}
    {% set Temperature_Timeout_Duration = params.TEMPERATURE_TIMEOUT_DURATION|default(6500000000)|int %}
        # 安全检查：确保所有轴未锁定
        {% if printer.pause_resume.is_paused %}
            { action_raise_error("错误：打印机处于暂停状态，请先恢复使能") }
        {% endif %}
        # 第一步：归位所有轴
        STATUS_MESSAGE="正在归位所有轴..."
        G28
        STATUS_MESSAGE="归位完成"
        # 第二步：自动调平
        Z_TILT_ADJUST
        # 第三步：Z轴安全抬升
        STATUS_MESSAGE="Z轴抬升中..."
        G90
        G0 Z5 F2000  # 以较慢速度抬升防止碰撞
        # 第四步：设置超时和温度校准
        SET_IDLE_TIMEOUT TIMEOUT={Temperature_Timeout_Duration}
        STATUS_MESSAGE="开始温度探头校准..."
        TEMPERATURE_PROBE_CALIBRATE PROBE=fly_eddy_probe TARGET={desired_temperature} STEP={temperature_range_value}
        # 第五步：设置打印温度（根据实际需求修改）
        STATUS_MESSAGE="设置工作温度..."
        SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={bed_temp}
        SET_HEATER_TEMPERATURE HEATER=extruder TARGET={nozzle_temp}
        # 完成提示
        STATUS_MESSAGE="温度补偿流程完成！"
        description: G-Code macro

[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing: _QUAD_GANTRY_LEVEL 
gcode:
    {action_respond_info("FLY QGL...")}
    # ========== State Save ==========
    SAVE_GCODE_STATE NAME=STATE_QGL 
    
    # ========== Environment Preparation ==========
    BED_MESH_CLEAR                       # Clear existing bed mesh data 
    
    # ========== Main Leveling Process ==========
    {% if not printer.quad_gantry_level.applied %}
        # Initial coarse adjustment 
        _QUAD_GANTRY_LEVEL horizontal_move_z=10 retry_tolerance=1
    {% endif %}
    
    # Fine secondary leveling 
    _QUAD_GANTRY_LEVEL horizontal_move_z=2 retry_tolerance=0.075 retries=20 METHOD=rapid_scan ADAPTIVE=1
        G0 Z10 F6000                     # Use standard G-code commands instead of HORIZONTAL_MOVE_Z

    # ========== Post-Processing ==========
    G90                                 # Force absolute coordinate mode 
    G0 Z10 F6000                        # Raise Z axis to safe height 
    M117 QGL Completed                  # Display completion status 
    G28                                 # Return to origin
    # ========== State Restore ==========
    RESTORE_GCODE_STATE NAME=STATE_QGL 
    M400 

[gcode_macro BED_MESH_CALIBRATE]
rename_existing: _BED_MESH_CALIBRATE
gcode:
    {action_respond_info("FLY BED_MESH_CALIBRATE...")}
    {% set TARGET_TEMP = printer.heater_bed.target %}
    M140 S0
    _BED_MESH_CALIBRATE {rawparams}
    M140 S{TARGET_TEMP}

# 若将Eddy同时用作探头和归位限位开关，并想使用测试版Z偏移控制
[delayed_gcode RESTORE_PROBE_OFFSET]  # 延迟G代码：恢复探头偏移量
initial_duration: 1  # 初始延迟时间(秒)
gcode:
  {% set svv = printer.save_variables.variables %}
  {% if not printer["gcode_macro SET_GCODE_OFFSET"].restored %}
    SET_GCODE_VARIABLE MACRO=SET_GCODE_OFFSET VARIABLE=runtime_offset VALUE={ svv.nvm_offset|default(0) }
    SET_GCODE_VARIABLE MACRO=SET_GCODE_OFFSET VARIABLE=restored VALUE=True
  {% endif %}

# 若将Eddy同时用作探头和归位限位开关
[gcode_macro SET_Z_FROM_PROBE]  # 根据探头结果设置Z轴
gcode:
    {% set cf = printer.configfile.settings %}
    SET_GCODE_OFFSET_ORIG Z={printer.probe.last_z_result - cf['probe_eddy_current fly_eddy_probe'].z_offset + printer["gcode_macro SET_GCODE_OFFSET"].runtime_offset}
    G90  # 切换为绝对坐标模式
    G1 Z{cf.safe_z_home.z_hop}  # Z轴抬升至安全高度

# 若将Eddy同时用作探头和归位限位开关，并想使用测试版Z偏移控制
[gcode_macro Z_OFFSET_APPLY_PROBE]  # Z偏移量应用宏
rename_existing: Z_OFFSET_APPLY_PROBE_ORIG  # 重命名原有命令
gcode:
  SAVE_VARIABLE VARIABLE=nvm_offset VALUE={ printer["gcode_macro SET_GCODE_OFFSET"].runtime_offset }  # 保存偏移量到变量
  RESPOND TYPE=echo MSG="保存成功"

# 若将Eddy同时用作探头和归位限位开关，并想使用测试版Z偏移控制
[gcode_macro SET_GCODE_OFFSET]  # G代码偏移设置宏
rename_existing: SET_GCODE_OFFSET_ORIG  # 重命名原有命令
variable_restored: False  # 标记变量是否已从非易失存储器恢复
variable_runtime_offset: 0  # 运行时偏移量
gcode:
    {action_respond_info("FLY SET_GCODE_OFFSET...")}
    {% if params.Z_ADJUST %}  # 如果存在Z轴调整参数
    SET_GCODE_VARIABLE MACRO=SET_GCODE_OFFSET VARIABLE=runtime_offset VALUE={ printer["gcode_macro SET_GCODE_OFFSET"].runtime_offset + params.Z_ADJUST|float }
    {% endif %}
    {% if params.Z %} 
    {% set paramList = rawparams.split() %}
    {% for i in range(paramList|length) %}
        {% if paramList[i]=="Z=0" %}
        {% set temp=paramList.pop(i) %}
        {% set temp="Z_ADJUST=" + (-printer["gcode_macro SET_GCODE_OFFSET"].runtime_offset)|string %}
        {% if paramList.append(temp) %}{% endif %}
        {% endif %}
    {% endfor %}
    {% set rawparams=paramList|join(' ') %}
    SET_GCODE_VARIABLE MACRO=SET_GCODE_OFFSET VARIABLE=runtime_offset VALUE=0
    {% endif %}
    SET_GCODE_OFFSET_ORIG { rawparams }  # 执行原始偏移设置命令

[gcode_macro _USER_VARIABLES]
variable_probe_type_enabled: "inductive_virtual"
# variable_startprint_actions: "bed_soak", "extruder_preheating", "chamber_soak", "tilt_calib", "clean", "z_offset", "bedmesh", "extruder_heating", "primeline"
variable_startprint_actions: "bed_soak", "extruder_preheating", "chamber_soak", "tilt_calib", "clean", "z_offset", "extruder_heating", "clean", "primeline"
gcode:

[include ../../../macros/base/probing/generic_probe.cfg]

# Quand gantry leveling definition
# If this files is included, then it also activate the QGL
# automatically in the START_PRINT macro
[gcode_macro _USER_VARIABLES]
variable_qgl_enabled: True
gcode:

# Also include directly the dockable probe overide of qgl from here
# [include ../../../macros/base/probing/overrides/qgl.cfg]
[include ../../../macros/base/homing/tilting.cfg]


[quad_gantry_level]
gantry_corners:
    -60,-10
    410,420
points:
    50,25
    50,275
    300,275
    300,25
speed: 350
horizontal_move_z: 12
retries: 5
retry_tolerance: 0.0075
max_adjust: 10

# If this files is included, then it also activate the bed_mesh
# automatically in the START_PRINT macro
[gcode_macro _USER_VARIABLES]
variable_bed_mesh_enabled: True
gcode:

# Also include directly the dockable probe overide of BED_MESH_CALIBRATE from here
# [include ../../../macros/base/probing/overrides/bed_mesh_calibrate.cfg]
# And also include the adaptive mesh macro at the same time
# [include ../../../macros/calibration/adaptive_bed_mesh.cfg]


[bed_mesh]
speed: 350
horizontal_move_z: 20
mesh_min: 25, 25
mesh_max: 325, 325
probe_count: 9, 9
fade_start: 0.6
fade_end: 10.0
algorithm: bicubic
zero_reference_position: 175, 175



[stepper_z]
endstop_pin: probe:z_virtual_endstop